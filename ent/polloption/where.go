// Code generated by ent, DO NOT EDIT.

package polloption

import (
	"poll-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PollOption {
	return predicate.PollOption(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PollOption {
	return predicate.PollOption(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PollOption {
	return predicate.PollOption(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PollOption {
	return predicate.PollOption(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PollOption {
	return predicate.PollOption(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PollOption {
	return predicate.PollOption(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PollOption {
	return predicate.PollOption(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PollOption {
	return predicate.PollOption(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PollOption {
	return predicate.PollOption(sql.FieldLTE(FieldID, id))
}

// Option applies equality check predicate on the "option" field. It's identical to OptionEQ.
func Option(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldEQ(FieldOption, v))
}

// OptionEQ applies the EQ predicate on the "option" field.
func OptionEQ(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldEQ(FieldOption, v))
}

// OptionNEQ applies the NEQ predicate on the "option" field.
func OptionNEQ(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldNEQ(FieldOption, v))
}

// OptionIn applies the In predicate on the "option" field.
func OptionIn(vs ...string) predicate.PollOption {
	return predicate.PollOption(sql.FieldIn(FieldOption, vs...))
}

// OptionNotIn applies the NotIn predicate on the "option" field.
func OptionNotIn(vs ...string) predicate.PollOption {
	return predicate.PollOption(sql.FieldNotIn(FieldOption, vs...))
}

// OptionGT applies the GT predicate on the "option" field.
func OptionGT(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldGT(FieldOption, v))
}

// OptionGTE applies the GTE predicate on the "option" field.
func OptionGTE(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldGTE(FieldOption, v))
}

// OptionLT applies the LT predicate on the "option" field.
func OptionLT(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldLT(FieldOption, v))
}

// OptionLTE applies the LTE predicate on the "option" field.
func OptionLTE(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldLTE(FieldOption, v))
}

// OptionContains applies the Contains predicate on the "option" field.
func OptionContains(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldContains(FieldOption, v))
}

// OptionHasPrefix applies the HasPrefix predicate on the "option" field.
func OptionHasPrefix(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldHasPrefix(FieldOption, v))
}

// OptionHasSuffix applies the HasSuffix predicate on the "option" field.
func OptionHasSuffix(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldHasSuffix(FieldOption, v))
}

// OptionEqualFold applies the EqualFold predicate on the "option" field.
func OptionEqualFold(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldEqualFold(FieldOption, v))
}

// OptionContainsFold applies the ContainsFold predicate on the "option" field.
func OptionContainsFold(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldContainsFold(FieldOption, v))
}

// HasPoll applies the HasEdge predicate on the "poll" edge.
func HasPoll() predicate.PollOption {
	return predicate.PollOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PollTable, PollPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPollWith applies the HasEdge predicate on the "poll" edge with a given conditions (other predicates).
func HasPollWith(preds ...predicate.Poll) predicate.PollOption {
	return predicate.PollOption(func(s *sql.Selector) {
		step := newPollStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PollOption) predicate.PollOption {
	return predicate.PollOption(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PollOption) predicate.PollOption {
	return predicate.PollOption(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PollOption) predicate.PollOption {
	return predicate.PollOption(func(s *sql.Selector) {
		p(s.Not())
	})
}
