// Code generated by ent, DO NOT EDIT.

package poll

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the poll type in the database.
	Label = "poll"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldQuestion holds the string denoting the question field in the database.
	FieldQuestion = "question"
	// EdgePollOptions holds the string denoting the poll_options edge name in mutations.
	EdgePollOptions = "poll_options"
	// Table holds the table name of the poll in the database.
	Table = "polls"
	// PollOptionsTable is the table that holds the poll_options relation/edge. The primary key declared below.
	PollOptionsTable = "poll_poll_options"
	// PollOptionsInverseTable is the table name for the PollOption entity.
	// It exists in this package in order to avoid circular dependency with the "polloption" package.
	PollOptionsInverseTable = "poll_options"
)

// Columns holds all SQL columns for poll fields.
var Columns = []string{
	FieldID,
	FieldQuestion,
}

var (
	// PollOptionsPrimaryKey and PollOptionsColumn2 are the table columns denoting the
	// primary key for the poll_options relation (M2M).
	PollOptionsPrimaryKey = []string{"poll_id", "poll_option_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Poll queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByQuestion orders the results by the question field.
func ByQuestion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuestion, opts...).ToFunc()
}

// ByPollOptionsCount orders the results by poll_options count.
func ByPollOptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPollOptionsStep(), opts...)
	}
}

// ByPollOptions orders the results by poll_options terms.
func ByPollOptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPollOptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPollOptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PollOptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, PollOptionsTable, PollOptionsPrimaryKey...),
	)
}
